/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package hems.OT;

import HEMS.DBUtil;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author EFHITPC1
 */
public final class Admission extends javax.swing.JFrame {

    private Connection conn = null;
    private ResultSet rs = null;
    private PreparedStatement pst = null;
    
    public Admission() throws SQLException {
        initComponents();
        conn = DBUtil.getConnection();
        setLocationRelativeTo(null);
        surgeryList();
        roomType();
        vacantRooms();
        eye();
        showDate();
        docBox();
    }
    //populate consultantsBox
    private void docBox(){
        String tablequery = "SELECT * from consultants";
        try {
            pst = conn.prepareStatement(tablequery);
            rs = pst.executeQuery();
            while (rs.next()){
                String docname =rs.getString("consultant");
                consultantBox.addItem(docname);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
        
    }
    //Date field
    private void showDate(){
        Calendar cal = new GregorianCalendar();
        dateField.setDateFormatString("yyyy-MM-dd");
        dateField.setDate(cal.getTime());
    }
    //Prepopulate vacant room box based on default room type selection
    private void vacantRooms(){
        String roomType = roomTypeBox.getItemAt(0).toString();
            String roomQuery = "    SELECT * FROM ROOMMASTER JOIN ROOMS ON ROOMMASTER.DESCRIPTIONID = ROOMS.ID WHERE DESCRIPTION = ?";
            try {
                pst = conn.prepareStatement(roomQuery);
                pst.setString(1, roomType);
                rs = pst.executeQuery();
                while(rs.next()){
                    roomsBox.addItem(rs.getString("room"));
                }
            } catch (SQLException ex) {
                Logger.getLogger(Admission.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        admissionPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        mrnField = new javax.swing.JTextField();
        pnameLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        surgeryBox = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        roomTypeBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        roomsBox = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        eyeBox = new javax.swing.JComboBox();
        submitButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        dateField = new com.toedter.calendar.JTextFieldDateEditor();
        jLabel6 = new javax.swing.JLabel();
        consultantBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        admissionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Admission"));

        jLabel1.setText("MRN: ");

        mrnField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mrnFieldActionPerformed(evt);
            }
        });

        pnameLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        jLabel2.setText("Surgery: ");

        jLabel3.setText("RoomType:");

        roomTypeBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                roomTypeBoxItemStateChanged(evt);
            }
        });

        jLabel4.setText("Available Rooms");

        jLabel5.setText("EYE:");

        submitButton.setText("SUBMIT");

        resetButton.setText("RESET");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        dateField.setEditable(false);

        jLabel6.setText("Consultant: ");

        javax.swing.GroupLayout admissionPanelLayout = new javax.swing.GroupLayout(admissionPanel);
        admissionPanel.setLayout(admissionPanelLayout);
        admissionPanelLayout.setHorizontalGroup(
            admissionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(admissionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(admissionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(admissionPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mrnField, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addComponent(pnameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 523, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(admissionPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(surgeryBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(roomTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roomsBox, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, admissionPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(admissionPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(eyeBox, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(consultantBox, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, admissionPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(229, 229, 229))
        );
        admissionPanelLayout.setVerticalGroup(
            admissionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(admissionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(admissionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mrnField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnameLabel))
                .addGap(25, 25, 25)
                .addGroup(admissionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(surgeryBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(roomTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(roomsBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(admissionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(eyeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(consultantBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(66, 66, 66)
                .addGroup(admissionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(submitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(29, Short.MAX_VALUE))
        );

        admissionPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, mrnField, pnameLabel});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(admissionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(admissionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void roomTypeBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_roomTypeBoxItemStateChanged
        // Populate rooms availabe based on roomtype chosen
        if(roomTypeBox.isFocusOwner()){
            roomsBox.removeAllItems();
            String roomType = roomTypeBox.getSelectedItem().toString();
            String roomQuery = "    SELECT * FROM ROOMMASTER JOIN ROOMS ON ROOMMASTER.DESCRIPTIONID = ROOMS.ID WHERE DESCRIPTION = ?";
            try {
                pst = conn.prepareStatement(roomQuery);
                pst.setString(1, roomType);
                rs = pst.executeQuery();
                while(rs.next()){
                    roomsBox.addItem(rs.getString("room"));
                }
            } catch (SQLException ex) {
                Logger.getLogger(Admission.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_roomTypeBoxItemStateChanged

    private void mrnFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mrnFieldActionPerformed
        // Populate patient name label when enter key is pressed
        String mrnQuery = "SELECT * FROM PATIENTREGISTER WHERE MRN = ?";
        try {
            pst = conn.prepareStatement(mrnQuery);
            pst.setString(1, mrnField.getText());
            rs = pst.executeQuery();
            if(rs.next()){
                String firstname = rs.getString("firstname");
                String middlename = rs.getString("middlename");
                String surname = rs.getString("surname");
                String pname = firstname+" "+middlename+" "+surname;
                pnameLabel.setText(pname);
            }
        }
        catch(SQLException ex){
            Logger.getLogger(Admission.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mrnFieldActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // reset all fields to default state
        mrnField.setText(null);
        pnameLabel.setText(null);
        eyeBox.setSelectedIndex(0);
        roomTypeBox.setSelectedIndex(0);
        roomsBox.setSelectedIndex(0);
        surgeryBox.setSelectedIndex(0);
    }//GEN-LAST:event_resetButtonActionPerformed
    //populate surgery combobox
    private void surgeryList(){
        String surgeryQuery = "SELECT * FROM SURGERYMASTER";
        try {
            pst = conn.prepareStatement(surgeryQuery);
            rs = pst.executeQuery();
            while(rs.next()){
                surgeryBox.addItem(rs.getString("surgery"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(Admission.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    //populate eyebox
    private void eye(){
        String eyeList  = "SELECT * FROM EYEMASTER";
        try {
            pst = conn.prepareStatement(eyeList);
            rs = pst.executeQuery();
            while(rs.next()){
                eyeBox.addItem(rs.getString("eye"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(Admission.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    //populate anaesthasia combobox
//    private void anaesthasiaList(){
//        String anesQuery = "SELECT * FROM ANAESTHESIA";
//        try {
//            pst = conn.prepareStatement(anesQuery);
//            rs = pst.executeQuery();
//            while(rs.next()){
//                eyeBox.addItem(rs.getString("anaesthesia"));
//            }
//        } catch (SQLException ex) {
//            Logger.getLogger(Admission.class.getName()).log(Level.SEVERE, null, ex);
//        }
//    }
    //populate room types
    private void roomType(){
        String typeQuery = "SELECT * FROM ROOMS";
        try {
            pst = conn.prepareStatement(typeQuery);
            rs = pst.executeQuery();
            while(rs.next()){
                roomTypeBox.addItem(rs.getString("description"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(Admission.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admission.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admission.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admission.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admission.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new Admission().setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(Admission.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel admissionPanel;
    private javax.swing.JComboBox consultantBox;
    private com.toedter.calendar.JTextFieldDateEditor dateField;
    private javax.swing.JComboBox eyeBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField mrnField;
    private javax.swing.JLabel pnameLabel;
    private javax.swing.JButton resetButton;
    private javax.swing.JComboBox roomTypeBox;
    private javax.swing.JComboBox roomsBox;
    private javax.swing.JButton submitButton;
    private javax.swing.JComboBox surgeryBox;
    // End of variables declaration//GEN-END:variables
}
